version: 2.0

linuxGoEnv1_14: &linuxGoEnv1_14
  docker:
    - image: golang:1.14
  environment:
    GOROOT: /usr/local/go
  working_directory: /go/src/github.com/olimpias/gvm

linuxGoEnv1_10: &linuxGoEnv1_10
  docker:
    - image: golang:1.10
  environment:
    GOROOT: /usr/local/go
  working_directory: /go/src/github.com/olimpias/gvm

jobs:
  unit-tests:
    <<: *linuxGoEnv1_14
    steps:
      - checkout
      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...
      - run: go test -v ./...

  integration-test-linux:
    <<: *linuxGoEnv1_10
    steps:
      - checkout
      - run:
          command: |
            go get ./...
            go build -o gvm ./cmd
            ./gvm use 1.14.4
            go version
            [[ $(go version) == "go version go1.14.4 linux/amd64" ]] && exit 0 || exit 1

  integration-test-windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: bash.exe
    environment:
      GOROOT: C:\Go
    resource_class: windows.medium
    working_directory: C:\github.com\olimpias\gvm
    steps:
      # Commands are run in a Windows virtual machine environment
      - checkout
      - run:
          command: |
            go build -o gvm ./cmd
            ./gvm dl 1.14.4
            ./gvm use 1.14.4
            go version
            [[ $(go version) == "go version go1.14.4 windows/amd64" ]] && exit 0 || exit 1

  integration-test-initial-setup-linux:
    <<: *linuxGoEnv1_14
    steps:
      - checkout
      - run:
          command: |
            go build -o gvm ./cmd
            PATH=$(echo "$PATH" | sed -e 's/:\/usr\/local\/go$//')
            echo $PATH
            unset GOROOT
            ./gvm use 1.14.1
            echo "usage is finished"
            go version
            [[ $(go version) == "go version go1.14.1 linux/amd64" ]] && exit 0 || exit 1

workflows:
  version: 2
  all:
    jobs:
      - unit-tests
      - integration-test-linux
      - integration-test-windows
      - integration-test-initial-setup-linux

